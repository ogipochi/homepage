{"version":3,"sources":["logo.svg","reducers/blog_reducers.js","reducers/index.js","actions/types.js","store.js","Root.js","components/widget/ImgHead.js","containers/Top.js","config.js","actions/api_blog.js","components/layout/BlogList.js","components/layout/BlogDetail.js","containers/Blog.js","containers/Profile.js","containers/English.js","components/widget/Logo.js","components/layout/Header.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","data","selectedData","undefined","combineReducers","blog","state","arguments","length","action","nextState","Object","assign","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","Root","props","react_default","a","createElement","es","Fragment","children","ImgHead","className","style","backgroundImage","concat","src","title","Top","widget_ImgHead","Component","API_ROOT","HEADERS","Content-Type","fetchBlogList","dispatch","fetch","method","headers","then","response","ok","Error","statusText","json","responseData","fetchBlogDetail","uuid","BlogList","map","Link","to","moment","format","tags","tag","BlogDetail","_this","this","resetBlogDetail","urlList","window","location","split","urlParams","console","log","created","edited","paragraphs","paragraph","content","comments","comment","message","connect","Promise","resolve","reject","Blog","Route","path","exact","render","_ref","match","layout_BlogList","component","Profile","English","Logo","Header","widget_Logo","Footer","App","BrowserRouter","layout_Header","layout_Footer","Boolean","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61b3d2c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {FETCH_BLOG_LIST,RESET_BLOG_DETAIL,FETCH_BLOG_DETAIL} from \"../actions/types\";\n\n\nconst initialState = {data:[],selectedData:undefined}\n\n\nexport default function(state=initialState,action){\n    const nextState = Object.assign({},state);\n    switch(action.type){\n        case FETCH_BLOG_LIST:\n        nextState.data = action.payload;\n        return nextState;\n        case RESET_BLOG_DETAIL:\n        nextState.selectedData = undefined\n        return nextState;\n        case FETCH_BLOG_DETAIL:\n        nextState.selectedData = action.payload.data;\n        return nextState;\n        default:\n        return nextState;\n    }\n}","import {combineReducers} from 'redux';\nimport blog_reducers from './blog_reducers';\n\nexport default combineReducers({\n    blog:blog_reducers,\n});","export const FETCH_BLOG_LIST = \"FETCH_BLOG_LIST\";\nexport const FETCH_BLOG_DETAIL=\"FETCH_BLOG_DETAIL\";\nexport const RESET_BLOG_DETAIL=\"RESET_BLOG_DETAIL\";","import {createStore,applyMiddleware,compose} from 'redux';\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\nconst initialStore = {};\nconst middleware = [thunk];\n\n\nconst store = createStore(\n    rootReducer,\n    initialStore,\n    compose(\n        applyMiddleware(...middleware),\n        //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // Redux Dev Tool使用のための設定\n    )\n)\n\nexport default store;","import React from 'react';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\n\nexport default (props)=>{\n    return(\n        <Provider store={store}>\n        <React.Fragment>\n            {props.children}\n        </React.Fragment>\n        </Provider>\n    )\n}","import React from \"react\";\n\n\nconst ImgHead =(props)=>{\n    return (\n        <div className=\"area--ImgHead\"\n        style={\n                {\n                    backgroundImage:`url(static/img/${props.src})`,\n            }\n                }\n        >\n        <h2 className=\"title--ImgHead\">{props.title}</h2>\n        </div>\n    )\n}\n\nexport default ImgHead;","import React,{Component} from \"react\";\nimport ImgHead from \"../components/widget/ImgHead\"\n\n\nclass Top extends Component{\n    render(){\n        return(\n            <div className=\"\">\n            <ImgHead src=\"img_top.jpg\" title=\"Top\"/>\n                このサイトは勉強のメモ用として利用していこうと考えています。<br/>\n            </div>\n        )\n    }\n}\n\n\nexport default Top;","export const API_ROOT = \"http://localhost:8000\";\nexport const HEADERS =  {\n    \"Content-Type\": \"application/json\"\n}","import {FETCH_BLOG_LIST,FETCH_BLOG_DETAIL,RESET_BLOG_DETAIL} from \"./types\";\nimport {API_ROOT,HEADERS} from \"../config\";\n\n\nexport const fetchBlogList = ()=>(dispatch)=>{\n    const url = API_ROOT+\"/api/blog/blog_list\"\n    return fetch(\n        url,\n        {\n            method:\"GET\",\n            headers:HEADERS\n        }\n    ).then(\n        response=>{\n            if(!response.ok){\n                throw Error(response.statusText)\n            }\n            return response.json();\n        }\n    ).then(\n        responseData=>{\n            const data = responseData.data;\n            dispatch(\n                {\n                    type:FETCH_BLOG_LIST,\n                    payload:data\n                }\n            )\n        }\n    )\n}\n\nexport const fetchBlogDetail = (uuid) => (dispatch)=>{\n    const url = API_ROOT + \"/api/blog/blog_detail/\" + uuid;\n    return fetch(\n        url,\n        {\n            method:\"GET\",\n            headers:HEADERS\n        }\n    ).then(\n        response=>{\n            if(!response.ok){\n                throw Error(response.statusText)\n            }\n            return response.json()\n        }\n    ).then(responseData=>{\n        dispatch({\n            type:FETCH_BLOG_DETAIL,\n            payload:responseData\n        })\n    })\n}\nexport const resetBlogDetail = ()=>(dispatch)=>{\n    const promise = new Promise((resolve,reject)=>{\n        dispatch({\n            type:RESET_BLOG_DETAIL\n        })\n        resolve();\n    });\n    return promise;\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { API_ROOT } from \"../../config\";\nimport moment from \"moment\";\n\nconst BlogList = (props) =>{\n    return(\n        <div className=\"area-main--Blog\">\n          {props.data.map(data => {\n            return (\n              <Link className=\"lnk-detail--Blog\" to={`/blog/detail/${data[\"uuid\"]}`}>\n                <img\n                  src={API_ROOT + data[\"main_image\"]}\n                  className=\"img-card--Blog\"\n                />\n                <div className=\"ttl-card--Blog\">{data[\"title\"]}</div>\n                <div className=\"sub-card--Blog\">\n                <div className=\"created-card--Blog\">\n                  {moment(data[\"created\"]).format(\"YYYY/MM/DD\")}\n                </div>\n                {data.tags.map(tag => {\n                  return <div>{tag[\"name\"]}</div>;\n                })}\n              </div>\n              </Link>\n            );\n          })}\n        </div>\n    )\n}\nexport default BlogList;","import React,{Component} from \"react\";\nimport { fetchBlogList,fetchBlogDetail,resetBlogDetail } from \"../../actions/api_blog\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\n\nclass BlogDetail extends Component{\n    \n    componentWillMount(){\n        this.props.resetBlogDetail().then(()=>{\n            \n            const urlList = window.location[\"href\"].split(\"/\")\n            const urlParams = urlList[urlList.length-1]\n            this.props.fetchBlogDetail(urlParams);\n        });\n    }\n    render(){\n        if(this.props.selectedData==undefined){\n            return <div>データを取得中です</div>\n        }else{\n            console.log(this.props.selectedData);\n            return(\n                <div>\n                    <div>タイトル:{this.props.selectedData.title}</div>\n                    <div>作成日:{moment(this.props.selectedData.created).format(\"YYYY/MM/DD\")}</div>\n                    <div>最終編集日:{moment(this.props.selectedData.edited).format(\"YYYY/MM/DD\")}</div>\n                    <div>本文：\n                        {this.props.selectedData.paragraphs.map(paragraph=>{\n                            return(<div>{paragraph.content}</div>)\n                        })}\n                    </div>\n                    <div>コメント：\n                        {this.props.selectedData.comments.map(comment=>{\n                            return(<div>{comment.message}</div>)\n                        })}\n                    </div>\n                </div>\n            )\n        }\n        \n    }\n}\n\nconst mapStateToProps = state => (\n    {selectedData:state.blog.selectedData}\n);\n\nexport default connect(\n  mapStateToProps,\n  { fetchBlogList,fetchBlogDetail,resetBlogDetail }\n)(BlogDetail);\n ","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchBlogList,fetchBlogDetail } from \"../actions/api_blog\";\nimport ImgHead from \"../components/widget/ImgHead\";\nimport { API_ROOT } from \"../config\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport BlogList from \"../components/layout/BlogList\";\nimport BlogDetail from \"../components/layout/BlogDetail\";\nimport { Route} from \"react-router-dom\";\n\n\nclass Blog extends Component {\n  componentWillMount() {\n    this.props.fetchBlogList();\n  }\n  render() {\n    return (\n      <div className=\"area--Blog\">\n        <ImgHead src=\"img_blog.jpg\" title=\"Blog\" />\n        <Route path=\"/blog\" exact render={({match}) => (\n    <BlogList data={this.props.data} match={match} />\n  )}/>\n        <Route path=\"/blog/detail/:uuid\" component={BlogDetail}/>\n    </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({ data: state.blog.data });\n\nexport default connect(\n  mapStateToProps,\n  { fetchBlogList,fetchBlogDetail }\n)(Blog);\n ","import React,{Component} from \"react\";\nimport ImgHead from \"../components/widget/ImgHead\"\n\n\nclass Profile extends Component{\n    render(){\n        return(\n            <div>\n                <ImgHead src=\"img_profile.jpg\" title=\"Profile\"/>\n                <h2>Profile</h2>\n                <div>\n                    <section>\n                        機械学習とWebの勉強をしているエンジニアです。<br/>\n                        英語の勉強も頑張ろうと思っているのですが、なかなか進みません。<br/>\n                        Webについての勉強が進んで来たのでいよいよホームページを作成しようという事にいたりました。<br/>\n                        勉強用の動画も上げたりなどするかもしれません。<br/>\n                        意見などあれば言っていただけると嬉しいです。<br/>\n                    </section>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Profile;","import React,{Component} from \"react\";\nimport ImgHead from \"../components/widget/ImgHead\"\n\n\nclass English extends Component{\n    render(){\n        return(\n            <div>\n                <ImgHead src=\"img_english.jpg\" title=\"English\"/>\n                Englishページ\n            </div>\n        )\n    }\n}\n\nexport default English;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\n\nconst Logo = ()=>{\n    return (\n        <Link className=\"area--Logo\" to=\"/\">\n            Oggy's Blog\n        </Link>\n    )\n}\n\nexport default Logo;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Logo from \"../widget/Logo\";\n\nconst Header = ()=>{\n    return (\n        <header>\n            <Logo/>\n            <nav className=\"nav--Header\">\n                <li>\n                    <Link to=\"/\" className=\"\">Top</Link>\n                </li>\n                <li>\n                    <Link to=\"/profile\" className=\"\">Profile</Link>\n                </li>\n                <li>\n                    <Link to=\"/blog\" className=\"\">Blog</Link>\n                </li>\n                <li>\n                    <Link to=\"/english\" className=\"\">English</Link>\n                </li>\n            </nav>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\n\nconst Footer = ()=>{\n    return (\n        <footer>\n            ogihara.inc\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Root from \"./Root\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Top from \"./containers/Top\";\nimport Blog from \"./containers/Blog\";\nimport Profile from \"./containers/Profile\";\nimport English from \"./containers/English\";\nimport Header from \"./components/layout/Header\";\nimport Footer from \"./components/layout/Footer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Root>\n        <Router>\n          <div className=\"App\">\n            <Header />\n            <main>\n              <Route path=\"/\" exact component={Top} />\n              <Route path=\"/blog\" component={Blog} />\n              <Route path=\"/profile\" component={Profile} />\n              <Route path=\"/english\" component={English} />\n            </main>\n            <Footer />\n          </div>\n        </Router>\n      </Root>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}